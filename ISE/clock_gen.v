////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2009 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 11.5
//  \   \         Application : xaw2verilog
//  /   /         Filename : clock_gen.v
// /___/   /\     Timestamp : 11/10/2015 17:10:21
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: xaw2verilog -intstyle /mnt/kona/materials/ikedajikken2015/DVI/ISE/ipcore_dir/clock_gen.xaw -st clock_gen.v
//Design Name: clock_gen
//Device: xc5vlx50-1ff676
//
// Module clock_gen
// Generated by Xilinx Architecture Wizard
// Written for synthesis tool: XST
// Period Jitter (unit interval) for block DCM_ADV_INST = 0.012 UI
// Period Jitter (Peak-to-Peak) for block DCM_ADV_INST = 0.158 ns
`timescale 1ns / 1ps

module clock_gen(CLKIN_IN, 
                 USER_RST_IN, 
                 CLKFX_OUT, 
                 CLKIN_IBUFG_OUT, 
                 CLK0_OUT);

    input CLKIN_IN;
    input USER_RST_IN;
   output CLKFX_OUT;
   output CLKIN_IBUFG_OUT;
   output CLK0_OUT;
   
   wire CLKFB_IN;
   wire CLKFX_BUF;
   wire CLKIN_IBUFG;
   wire CLK0_BUF;
   wire FDS_Q_OUT;
   wire FD1_Q_OUT;
   wire FD2_Q_OUT;
   wire FD3_Q_OUT;
   wire GND_BIT;
   wire [6:0] GND_BUS_7;
   wire [15:0] GND_BUS_16;
   wire OR3_O_OUT;
   wire RST_IN;
   
   assign GND_BIT = 0;
   assign GND_BUS_7 = 7'b0000000;
   assign GND_BUS_16 = 16'b0000000000000000;
   assign CLKIN_IBUFG_OUT = CLKIN_IBUFG;
   assign CLK0_OUT = CLKFB_IN;
   BUFG CLKFX_BUFG_INST (.I(CLKFX_BUF), 
                         .O(CLKFX_OUT));
   IBUFG CLKIN_IBUFG_INST (.I(CLKIN_IN), 
                           .O(CLKIN_IBUFG));
   BUFG CLK0_BUFG_INST (.I(CLK0_BUF), 
                        .O(CLKFB_IN));
   DCM_ADV DCM_ADV_INST (.CLKFB(CLKFB_IN), 
                         .CLKIN(CLKIN_IBUFG), 
                         .DADDR(GND_BUS_7[6:0]), 
                         .DCLK(GND_BIT), 
                         .DEN(GND_BIT), 
                         .DI(GND_BUS_16[15:0]), 
                         .DWE(GND_BIT), 
                         .PSCLK(GND_BIT), 
                         .PSEN(GND_BIT), 
                         .PSINCDEC(GND_BIT), 
                         .RST(RST_IN), 
                         .CLKDV(), 
                         .CLKFX(CLKFX_BUF), 
                         .CLKFX180(), 
                         .CLK0(CLK0_BUF), 
                         .CLK2X(), 
                         .CLK2X180(), 
                         .CLK90(), 
                         .CLK180(), 
                         .CLK270(), 
                         .DO(), 
                         .DRDY(), 
                         .LOCKED(), 
                         .PSDONE());
   defparam DCM_ADV_INST.CLK_FEEDBACK = "1X";
   defparam DCM_ADV_INST.CLKDV_DIVIDE = 2.0;
   defparam DCM_ADV_INST.CLKFX_DIVIDE = 4;
   defparam DCM_ADV_INST.CLKFX_MULTIPLY = 3;
   defparam DCM_ADV_INST.CLKIN_DIVIDE_BY_2 = "FALSE";
   defparam DCM_ADV_INST.CLKIN_PERIOD = 10.000;
   defparam DCM_ADV_INST.CLKOUT_PHASE_SHIFT = "NONE";
   defparam DCM_ADV_INST.DCM_AUTOCALIBRATION = "TRUE";
   defparam DCM_ADV_INST.DCM_PERFORMANCE_MODE = "MAX_SPEED";
   defparam DCM_ADV_INST.DESKEW_ADJUST = "SYSTEM_SYNCHRONOUS";
   defparam DCM_ADV_INST.DFS_FREQUENCY_MODE = "LOW";
   defparam DCM_ADV_INST.DLL_FREQUENCY_MODE = "LOW";
   defparam DCM_ADV_INST.DUTY_CYCLE_CORRECTION = "TRUE";
   defparam DCM_ADV_INST.FACTORY_JF = 16'hF0F0;
   defparam DCM_ADV_INST.PHASE_SHIFT = 0;
   defparam DCM_ADV_INST.STARTUP_WAIT = "FALSE";
   defparam DCM_ADV_INST.SIM_DEVICE = "VIRTEX5";
   FDS FDS_INST (.C(CLKIN_IBUFG), 
                 .D(GND_BIT), 
                 .S(GND_BIT), 
                 .Q(FDS_Q_OUT));
   FD FD1_INST (.C(CLKIN_IBUFG), 
                .D(FDS_Q_OUT), 
                .Q(FD1_Q_OUT));
   FD FD2_INST (.C(CLKIN_IBUFG), 
                .D(FD1_Q_OUT), 
                .Q(FD2_Q_OUT));
   FD FD3_INST (.C(CLKIN_IBUFG), 
                .D(FD2_Q_OUT), 
                .Q(FD3_Q_OUT));
   OR2 OR2_INST (.I0(USER_RST_IN), 
                 .I1(OR3_O_OUT), 
                 .O(RST_IN));
   OR3 OR3_INST (.I0(FD3_Q_OUT), 
                 .I1(FD2_Q_OUT), 
                 .I2(FD1_Q_OUT), 
                 .O(OR3_O_OUT));
endmodule
